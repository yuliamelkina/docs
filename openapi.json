{
  "openapi": "3.0.0",
  "paths": {
    "/customers": {
      "post": {
        "operationId": "CustomersController_create",
        "parameters": [
          {
            "name": "idempotency-key",
            "required": true,
            "in": "header",
            "description": "UUID for request idempotency (auto-generated in development if not provided)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Customer object to be created (individual only)",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              },
              "examples": {
                "individual": {
                  "value": {
                    "type": "individual",
                    "first_name": "John",
                    "last_name": "Doe",
                    "email": "john.doe@example.com",
                    "birth_date": "1990-01-01",
                    "residential_address": {
                      "street_line_1": "123 Main Street",
                      "city": "Portland",
                      "subdivision": "US-ME",
                      "postal_code": "04101",
                      "country": "USA"
                    },
                    "identifying_information": [
                      {
                        "type": "ssn",
                        "issuing_country": "USA",
                        "number": "123-45-6789"
                      }
                    ],
                    "endorsements": [
                      "base"
                    ],
                    "signed_agreement_id": "agr_test_abc123xyz"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Customer object created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error."
          },
          "409": {
            "description": "Idempotency key conflict."
          }
        },
        "summary": "Create a new customer",
        "tags": [
          "Customers"
        ]
      }
    },
    "/customers/{customerId}": {
      "put": {
        "operationId": "CustomersController_update",
        "parameters": [
          {
            "name": "idempotency-key",
            "required": true,
            "in": "header",
            "description": "UUID for request idempotency (auto-generated in development if not provided)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "description": "Customer ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomerClientDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Customer object updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponseDto"
                }
              }
            }
          }
        },
        "summary": "Update customer",
        "tags": [
          "Customers"
        ]
      },
      "get": {
        "operationId": "CustomersController_findOne",
        "parameters": [
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "description": "Customer ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get customer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get customer and check KYC status",
        "tags": [
          "Customers"
        ]
      }
    },
    "/customers/{customerId}/wallets": {
      "post": {
        "operationId": "WalletsController_create",
        "parameters": [
          {
            "name": "idempotency-key",
            "required": true,
            "in": "header",
            "description": "UUID for request idempotency (auto-generated in development if not provided)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "description": "A UUID that uniquely identifies a resource",
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 42
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWalletClientDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create a new custodial wallet for a customer",
        "tags": [
          "Wallets"
        ]
      },
      "get": {
        "operationId": "WalletsController_listForCustomer",
        "parameters": [
          {
            "name": "starting_after",
            "required": false,
            "in": "query",
            "description": "A wallet ID. If provided, returns the next page starting after this wallet in the timeline (which is ordered newest → oldest). Implies that wallets older than the specified ID will be returned. Mutually exclusive with ending_before.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ending_before",
            "required": false,
            "in": "query",
            "description": "A wallet ID. If provided, returns the previous page ending before this wallet in the timeline (newest → oldest). Implies that wallets newer than the specified ID will be returned. Mutually exclusive with starting_after.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items to return.",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "type": "number"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "description": "A UUID that uniquely identifies a resource",
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 42
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletsListResponseDto"
                }
              }
            }
          }
        },
        "summary": "List wallets for a customer",
        "tags": [
          "Wallets"
        ]
      }
    },
    "/customers/{customerId}/wallets/{walletId}": {
      "get": {
        "operationId": "WalletsController_getWallet",
        "parameters": [
          {
            "name": "walletId",
            "required": true,
            "in": "path",
            "description": "The ID of the wallet to get.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "description": "A UUID that uniquely identifies a resource",
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 42
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get a wallet and balances for a customer",
        "tags": [
          "Wallets"
        ]
      }
    },
    "/customers/{customerId}/virtual_accounts": {
      "post": {
        "operationId": "VirtualAccountsController_create",
        "parameters": [
          {
            "name": "idempotency-key",
            "required": true,
            "in": "header",
            "description": "UUID for request idempotency (auto-generated in development if not provided)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "description": "A UUID that uniquely identifies a resource",
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 42
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Virtual account configuration for fiat-to-crypto conversion",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVirtualAccountClientDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VirtualAccountResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create a virtual account",
        "tags": [
          "Virtual Accounts"
        ]
      },
      "get": {
        "operationId": "VirtualAccountsController_list",
        "parameters": [
          {
            "name": "starting_after",
            "required": false,
            "in": "query",
            "description": "A virtual account ID. If provided, returns the next page starting after this virtual account in the timeline (which is ordered newest → oldest). Implies that virtual accounts older than the specified ID will be returned. Mutually exclusive with ending_before.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ending_before",
            "required": false,
            "in": "query",
            "description": "A virtual account ID. If provided, returns the previous page ending before this virtual account in the timeline (newest → oldest). Implies that virtual accounts newer than the specified ID will be returned. Mutually exclusive with starting_after.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items to return.",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "type": "number"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "description": "A UUID that uniquely identifies a resource",
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 42
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VirtualAccountsListResponseDto"
                }
              }
            }
          }
        },
        "summary": "List virtual accounts for customer",
        "tags": [
          "Virtual Accounts"
        ]
      }
    },
    "/customers/{customerId}/virtual_accounts/{virtualAccountId}": {
      "get": {
        "operationId": "VirtualAccountsController_get",
        "parameters": [
          {
            "name": "virtualAccountId",
            "required": true,
            "in": "path",
            "description": "The ID of the virtual account to get.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "description": "A UUID that uniquely identifies a resource",
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 42
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VirtualAccountResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get virtual account by id",
        "tags": [
          "Virtual Accounts"
        ]
      }
    },
    "/transfers": {
      "post": {
        "operationId": "TransfersController_create",
        "parameters": [
          {
            "name": "idempotency-key",
            "required": true,
            "in": "header",
            "description": "UUID for request idempotency (auto-generated in development if not provided)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Transfer object to be created",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              },
              "examples": {
                "ach_onramp_to_solana": {
                  "summary": "ACH onramp to Solana USDC",
                  "value": {
                    "amount": "75.0",
                    "on_behalf_of": "cust_123",
                    "source": {
                      "payment_rail": "ach_push",
                      "currency": "usd"
                    },
                    "destination": {
                      "payment_rail": "solana",
                      "currency": "usdc",
                      "to_address": "SolanaDest111111111111111111111111111",
                      "wallet_id": "wallet_123"
                    }
                  }
                },
                "crypto_offramp_to_ach": {
                  "summary": "Crypto (Ethereum USDC) → ACH",
                  "value": {
                    "amount": "100.0",
                    "on_behalf_of": "cust_123",
                    "source": {
                      "payment_rail": "ethereum",
                      "currency": "usdc",
                      "from_address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                    },
                    "destination": {
                      "payment_rail": "ach",
                      "currency": "usd",
                      "external_account_id": "ext_123"
                    }
                  }
                },
                "flexible_amount": {
                  "summary": "Flexible amount transfer (omit amount)",
                  "value": {
                    "on_behalf_of": "cust_123",
                    "source": {
                      "payment_rail": "sepa",
                      "currency": "eur"
                    },
                    "destination": {
                      "payment_rail": "ethereum",
                      "currency": "usdc",
                      "to_address": "0xb794f5ea0ba39494ce839613fffba74279579268"
                    },
                    "features": {
                      "flexible_amount": true
                    }
                  }
                },
                "intra_wallet_transfer": {
                  "summary": "Intra-wallet transfer (wallet to chain)",
                  "value": {
                    "amount": "5.0",
                    "on_behalf_of": "cust_123",
                    "source": {
                      "payment_rail": "wallet",
                      "currency": "usdb",
                      "wallet_id": "wallet_123"
                    },
                    "destination": {
                      "payment_rail": "base",
                      "currency": "usdc",
                      "wallet_id": "wallet_123"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create a transfer",
        "tags": [
          "Transfers"
        ]
      },
      "get": {
        "operationId": "TransfersController_list",
        "parameters": [
          {
            "name": "starting_after",
            "required": false,
            "in": "query",
            "description": "This is a transfer id. If this is specified, the next page that starts with a transfer right AFTER the specified transfer id on the transfer timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that transfers older than the specified transfer id will be returned (shouldn't be set if ending_before is set)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ending_before",
            "required": false,
            "in": "query",
            "description": "This is a transfer id. If this is specified, the previous page that ends with a transfer right BEFORE the specified transfer id on the transfer timeline, which is always ordered from the newest to the oldest by creation time, will be returned. This also implies that transfers newer than the specified transfer id will be returned (shouldn't be set if starting_after is set)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The number of items to return (default of 10, max of 100)",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "type": "number"
            }
          },
          {
            "name": "customerId",
            "required": false,
            "in": "query",
            "description": "Filter transfers by customer ID",
            "schema": {
              "format": "uuid",
              "pattern": "^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$",
              "type": "string"
            }
          },
          {
            "name": "tx_hash",
            "required": false,
            "in": "query",
            "description": "The hash of the transaction",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updated_after_ms",
            "required": false,
            "in": "query",
            "description": "This is a unix timestamp in milliseconds. If this is specified, objects updated AFTER the specified timestamp will be returned",
            "schema": {
              "minimum": -9007199254740991,
              "maximum": 9007199254740991,
              "type": "number"
            }
          },
          {
            "name": "updated_before_ms",
            "required": false,
            "in": "query",
            "description": "This is a unix timestamp in milliseconds. If this is specified, objects updated BEFORE the specified timestamp will be returned",
            "schema": {
              "minimum": -9007199254740991,
              "maximum": 9007199254740991,
              "type": "number"
            }
          },
          {
            "name": "state",
            "required": false,
            "in": "query",
            "description": "Filter transfers by their external state. See Transfer States for more details.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransfersListResponseDto"
                }
              }
            }
          }
        },
        "summary": "List transfers",
        "tags": [
          "Transfers"
        ]
      }
    },
    "/transfers/{transferId}": {
      "get": {
        "operationId": "TransfersController_get",
        "parameters": [
          {
            "name": "transferId",
            "required": true,
            "in": "path",
            "description": "The ID of the transfer.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get a transfer by id",
        "tags": [
          "Transfers"
        ]
      }
    },
    "/customers/{customerId}/liquidation_addresses": {
      "post": {
        "operationId": "LiquidationAddressesController_create",
        "parameters": [
          {
            "name": "idempotency-key",
            "required": true,
            "in": "header",
            "description": "UUID for request idempotency (auto-generated in development if not provided)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "description": "Customer ID",
            "schema": {}
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "example": {
                      "chain": "ethereum",
                      "currency": "usdc",
                      "destination_payment_rail": "wire",
                      "destination_currency": "usd",
                      "external_account_id": "ext_123",
                      "custom_developer_fee_percent": "0.25"
                    }
                  },
                  {
                    "example": {
                      "chain": "solana",
                      "currency": "usdc",
                      "destination_payment_rail": "solana",
                      "destination_currency": "usdc",
                      "destination_address": "SolanaDest111111111111111111111111111"
                    }
                  }
                ]
              },
              "examples": {
                "crypto_to_fiat": {
                  "summary": "Crypto to USD via Wire",
                  "description": "Liquidation address that converts Ethereum USDC to USD sent via wire transfer",
                  "value": {
                    "chain": "ethereum",
                    "currency": "usdc",
                    "destination_payment_rail": "wire",
                    "destination_currency": "usd",
                    "external_account_id": "ext_123"
                  }
                },
                "crypto_to_crypto": {
                  "summary": "Crypto to Crypto on Solana",
                  "description": "Liquidation address that forwards Solana USDC to another Solana address",
                  "value": {
                    "chain": "solana",
                    "currency": "usdc",
                    "destination_payment_rail": "solana",
                    "destination_currency": "usdc",
                    "destination_address": "SolanaDest11111111111111111111111111111"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LiquidationAddressResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create a liquidation address for a customer",
        "tags": [
          "Liquidation Addresses"
        ]
      },
      "get": {
        "operationId": "LiquidationAddressesController_list",
        "parameters": [
          {
            "name": "starting_after",
            "required": false,
            "in": "query",
            "description": "A liquidation address ID. If provided, returns the next page starting after this liquidation address in the timeline (which is ordered newest → oldest). Implies that liquidation addresses older than the specified ID will be returned. Mutually exclusive with ending_before.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ending_before",
            "required": false,
            "in": "query",
            "description": "A liquidation address ID. If provided, returns the previous page ending before this liquidation address in the timeline (newest → oldest). Implies that liquidation addresses newer than the specified ID will be returned. Mutually exclusive with starting_after.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items to return.",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "type": "number"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "description": "Customer ID",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LiquidationAddressesListResponseDto"
                }
              }
            }
          }
        },
        "summary": "List liquidation addresses for a customer",
        "tags": [
          "Liquidation Addresses"
        ]
      }
    },
    "/customers/{customerId}/liquidation_addresses/{liquidationAddressId}/drains": {
      "get": {
        "operationId": "LiquidationAddressesController_listDrains",
        "parameters": [
          {
            "name": "liquidationAddressId",
            "required": true,
            "in": "path",
            "description": "The ID of the liquidation address.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "starting_after",
            "required": false,
            "in": "query",
            "description": "A drain ID. If provided, returns the next page starting after this drain in the timeline (which is ordered newest → oldest). Implies that drains older than the specified ID will be returned. Mutually exclusive with ending_before.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ending_before",
            "required": false,
            "in": "query",
            "description": "A drain ID. If provided, returns the previous page ending before this drain in the timeline (newest → oldest). Implies that drains newer than the specified ID will be returned. Mutually exclusive with starting_after.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items to return.",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "type": "number"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "description": "Customer ID",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LiquidationDrainsListResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get drain history of a liquidation address",
        "tags": [
          "Liquidation Addresses"
        ]
      }
    },
    "/customers/{customerId}/liquidation_addresses/{liquidationAddressId}": {
      "get": {
        "operationId": "LiquidationAddressesController_get",
        "parameters": [
          {
            "name": "liquidationAddressId",
            "required": true,
            "in": "path",
            "description": "The ID of the liquidation address.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "description": "Customer ID",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LiquidationAddressResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get liquidation address by id",
        "tags": [
          "Liquidation Addresses"
        ]
      }
    },
    "/customers/{customerId}/external_accounts": {
      "post": {
        "operationId": "ExternalAccountsController_create",
        "parameters": [
          {
            "name": "idempotency-key",
            "required": true,
            "in": "header",
            "description": "UUID for request idempotency (auto-generated in development if not provided)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "description": "Customer ID",
            "schema": {}
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Bank account details (US banks only)",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              },
              "examples": {
                "us_checking": {
                  "value": {
                    "currency": "usd",
                    "account_type": "us",
                    "bank_name": "Lead Bank",
                    "account_name": "John Checking Account",
                    "first_name": "John",
                    "last_name": "Doe",
                    "account_owner_type": "individual",
                    "account_owner_name": "John Doe",
                    "account": {
                      "routing_number": "101019644",
                      "account_number": "215268129123",
                      "checking_or_savings": "checking"
                    },
                    "address": {
                      "street_line_1": "923 Folsom Street",
                      "country": "USA",
                      "state": "CA",
                      "city": "San Francisco",
                      "postal_code": "94107"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalAccountResponseDto"
                }
              }
            }
          }
        },
        "summary": "Add a bank account for withdrawals",
        "tags": [
          "External Accounts"
        ]
      },
      "get": {
        "operationId": "ExternalAccountsController_list",
        "parameters": [
          {
            "name": "starting_after",
            "required": false,
            "in": "query",
            "description": "An external account ID. If provided, returns the next page starting after this external account in the timeline (which is ordered newest → oldest). Implies that external accounts older than the specified ID will be returned. Mutually exclusive with ending_before.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ending_before",
            "required": false,
            "in": "query",
            "description": "An external account ID. If provided, returns the previous page ending before this external account in the timeline (newest → oldest). Implies that external accounts newer than the specified ID will be returned. Mutually exclusive with starting_after.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items to return.",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "type": "number"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "description": "Customer ID",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalAccountsListResponseDto"
                }
              }
            }
          }
        },
        "summary": "List bank accounts for customer",
        "tags": [
          "External Accounts"
        ]
      }
    },
    "/customers/{customerId}/external_accounts/{externalAccountId}": {
      "get": {
        "operationId": "ExternalAccountsController_get",
        "parameters": [
          {
            "name": "externalAccountId",
            "required": true,
            "in": "path",
            "description": "The ID of the external account.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "description": "Customer ID",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalAccountResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get bank account by id",
        "tags": [
          "External Accounts"
        ]
      },
      "delete": {
        "operationId": "ExternalAccountsController_delete",
        "parameters": [
          {
            "name": "externalAccountId",
            "required": true,
            "in": "path",
            "description": "The ID of the external account.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "description": "Customer ID",
            "schema": {}
          }
        ],
        "responses": {
          "204": {
            "description": "Bank account removed successfully"
          }
        },
        "summary": "Remove bank account",
        "tags": [
          "External Accounts"
        ]
      }
    }
  },
  "info": {
    "title": "Payment API",
    "description": "\nAPI documentation for the payment processing service\n\n## Quick Start\n1. X-Access-Key will be automatically set to \"test-api-key\" for testing\n2. Tenant ID is now automatically resolved from your API key\n3. idempotency-key will be auto-generated for write operations if not provided\n\n## Headers\n- **x-access-key**: Your tenant API key (defaults to \"test-api-key\" in Swagger)\n- **Tenant ID**: Automatically resolved from your API key\n- **idempotency-key**: UUID for request idempotency (auto-generated if not provided)\n        ",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development server"
    }
  ],
  "components": {
    "securitySchemes": {
      "x-access-key": {
        "type": "apiKey",
        "in": "header",
        "name": "x-access-key",
        "description": "Tenant API key (defaults to \"test-api-key\" in Swagger)"
      },
      "idempotency-key": {
        "type": "apiKey",
        "in": "header",
        "name": "idempotency-key",
        "description": "UUID for request idempotency (auto-generated if not provided)"
      }
    },
    "schemas": {
      "EndorsementDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "enum": [
              "base",
              "sepa",
              "ach",
              "wire",
              "swift",
              "spei",
              "ach_same_day",
              "ach_push"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "incomplete",
              "approved",
              "revoked",
              "pending",
              "under_review",
              "rejected"
            ]
          },
          "additional_requirements": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "status"
        ]
      },
      "CustomerResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "individual",
              "business"
            ],
            "description": "Customer type"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "awaiting_questionnaire",
              "awaiting_ubo",
              "incomplete",
              "not_started",
              "offboarded",
              "paused",
              "rejected",
              "under_review"
            ]
          },
          "has_accepted_terms_of_service": {
            "type": "boolean",
            "description": "Whether the customer has accepted the terms of service."
          },
          "rejection_reasons": {
            "description": "KYC rejection reasons",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "requirements_due": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "future_requirements_due": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "endorsements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EndorsementDto"
            }
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "type",
          "status"
        ]
      },
      "AddressDto": {
        "type": "object",
        "properties": {
          "street_line_1": {
            "type": "string",
            "example": "123 Main Street",
            "minLength": 4
          },
          "street_line_2": {
            "type": "string",
            "example": "Apt 2B",
            "minLength": 1
          },
          "city": {
            "type": "string",
            "example": "Portland",
            "minLength": 1
          },
          "subdivision": {
            "type": "string",
            "example": "US-ME",
            "description": "ISO 3166-2 subdivision code. Must be supplied for US addresses.",
            "minLength": 1,
            "maxLength": 3
          },
          "postal_code": {
            "type": "string",
            "example": "04101",
            "description": "Must be supplied for countries that use postal codes.",
            "minLength": 1
          },
          "country": {
            "type": "string",
            "example": "USA",
            "description": "Three-letter alpha-3 country code as defined in the ISO 3166-1 spec.",
            "minLength": 3,
            "maxLength": 3
          }
        }
      },
      "IdentifyingInformationDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "ssn",
            "description": "The type of identifying document or tax identification number"
          },
          "issuing_country": {
            "type": "string",
            "example": "USA",
            "description": "The ISO 3166-1 (three-character) country code that issued the provided document."
          },
          "number": {
            "type": "string",
            "example": "123-45-6789",
            "description": "The unique identifier of the document."
          },
          "description": {
            "type": "string",
            "description": "A description describing the provided document. This field is required when `other` is selected."
          },
          "expiration": {
            "type": "string",
            "example": "2030-12-31",
            "description": "The expiration date of the given document in yyyy-mm-dd format."
          },
          "image_front": {
            "type": "string",
            "description": "Base64 encoded image of the front side of the provided document, following the data-uri scheme. Maximum File Size: 15MB. Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif"
          },
          "image_back": {
            "type": "string",
            "description": "Base64 encoded image of the back side of the provided document, following the data-uri scheme. Maximum File Size: 15MB. Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif"
          }
        }
      },
      "DocumentDto": {
        "type": "object",
        "properties": {
          "purposes": {
            "example": [
              "proof_of_address"
            ],
            "description": "A list of purposes that the given document serves.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "file": {
            "type": "string",
            "description": "Base64 encoded image of the provided document, following the data-uri scheme. Maximum File Size: 24MB. Valid file types: .pdf, .jpeg, .jpg, .png, .heic, .tif"
          },
          "description": {
            "type": "string",
            "description": "A description describing the provided document. This field is required when `other` is provided as one of the purposes."
          }
        }
      },
      "UpdateCustomerClientDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "individual",
              "business"
            ],
            "example": "individual",
            "description": "Type of the customer (individual vs. business)."
          },
          "first_name": {
            "type": "string",
            "example": "John",
            "description": "The first name of the individual.",
            "minLength": 2,
            "maxLength": 1024
          },
          "last_name": {
            "type": "string",
            "example": "Doe",
            "description": "The last name of the individual.",
            "minLength": 2,
            "maxLength": 1024
          },
          "middle_name": {
            "type": "string",
            "description": "The middle name of the individual.",
            "minLength": 1,
            "maxLength": 1024
          },
          "transliterated_first_name": {
            "type": "string",
            "description": "Required when the `first_name` includes any non Latin-1 characters. Acceptable characters - Latin-1 Unicode Character Range: À-ÖØ-ßà-öø-ÿ; Standard Unicode Character Range:  -~",
            "minLength": 1,
            "maxLength": 256
          },
          "transliterated_middle_name": {
            "type": "string",
            "description": "Required when the `middle_name` includes any non Latin-1 characters. Acceptable characters - Latin-1 Unicode Character Range: À-ÖØ-ßà-öø-ÿ; Standard Unicode Character Range:  -~",
            "minLength": 1,
            "maxLength": 256
          },
          "transliterated_last_name": {
            "type": "string",
            "description": "Required when the `last_name` includes any non Latin-1 characters. Acceptable characters - Latin-1 Unicode Character Range: À-ÖØ-ßà-öø-ÿ; Standard Unicode Character Range:  -~",
            "minLength": 1,
            "maxLength": 256
          },
          "email": {
            "type": "string",
            "example": "john.doe@example.com",
            "description": "The individuals primary email address",
            "minLength": 1,
            "maxLength": 1024
          },
          "phone": {
            "type": "string",
            "description": "The individuals primary phone number in format \"+12223334444\"",
            "minLength": 1,
            "maxLength": 1024
          },
          "birth_date": {
            "type": "string",
            "example": "1990-01-01",
            "description": "Date of birth in format yyyy-mm-dd. Must be at least 18 years old.",
            "minLength": 10,
            "maxLength": 10
          },
          "nationality": {
            "type": "string",
            "description": "The ISO 3166-1 (three-character) country code representing the nationality of the customer."
          },
          "residential_address": {
            "description": "The residential address of the individual. This must be a physical address, not a PO Box.",
            "example": {
              "street_line_1": "123 Main Street",
              "city": "Portland",
              "subdivision": "US-ME",
              "postal_code": "04101",
              "country": "USA"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressDto"
              }
            ]
          },
          "transliterated_residential_address": {
            "description": "Required when any part of the `residential_address` includes any non Latin-1 characters. Acceptable characters - Latin-1 Unicode Character Range: À-ÖØ-ßà-öø-ÿ; Standard Unicode Character Range:  -~",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressDto"
              }
            ]
          },
          "identifying_information": {
            "description": "Identifying information for the customer",
            "example": [
              {
                "type": "ssn",
                "issuing_country": "USA",
                "number": "123-45-6789"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentifyingInformationDto"
            }
          },
          "documents": {
            "description": "Documents for the customer",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentDto"
            }
          },
          "signed_agreement_id": {
            "type": "string",
            "description": "The ID of the signed agreement that the customer completed.",
            "minLength": 1,
            "maxLength": 1024
          },
          "endorsements": {
            "description": "List of endorsements to request for this customer. If omitted, we'll attempt to grant `base` and `sepa`.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "account_purpose": {
            "type": "string",
            "description": "What is the primary purpose of the customer's account?",
            "enum": [
              "charitable_donations",
              "ecommerce_retail_payments",
              "investment_purposes",
              "operating_a_company",
              "other",
              "payments_to_friends_or_family_abroad",
              "personal_or_living_expenses",
              "protect_wealth",
              "purchase_goods_and_services",
              "receive_payment_for_freelancing",
              "receive_salary"
            ]
          },
          "account_purpose_other": {
            "type": "string",
            "description": "A supplemental description of the `account_purpose`. Required if the `account_purpose` is `other`."
          },
          "employment_status": {
            "type": "string",
            "description": "What is the customer's current employment status?",
            "enum": [
              "employed",
              "homemaker",
              "retired",
              "self_employed",
              "student",
              "unemployed"
            ]
          },
          "expected_monthly_payments_usd": {
            "type": "string",
            "description": "What is the expected monthly volume of payments the customer will be sending or receiving?",
            "enum": [
              "0_4999",
              "5000_9999",
              "10000_49999",
              "50000_plus"
            ]
          },
          "acting_as_intermediary": {
            "type": "boolean",
            "description": "Is the customer acting as an intermediary for a third party?"
          },
          "most_recent_occupation": {
            "type": "string",
            "description": "What is the customer's most recent occupation? Specify the relevant alphanumeric occupation code."
          },
          "source_of_funds": {
            "type": "string",
            "description": "The individuals source of funds, e.g. government_benefits, investments_loans, salary, etc.",
            "enum": [
              "company_funds",
              "ecommerce_reseller",
              "gambling_proceeds",
              "gifts",
              "government_benefits",
              "inheritance",
              "investments_loans",
              "pension_retirement",
              "salary",
              "sale_of_assets_real_estate",
              "savings",
              "someone_elses_funds"
            ]
          },
          "verified_govid_at": {
            "type": "string",
            "description": "The timestamp for when individual's government ID was successfully verified."
          },
          "verified_selfie_at": {
            "type": "string",
            "description": "The timestamp for when individual's selfie was successfully verified."
          },
          "completed_customer_safety_check_at": {
            "type": "string",
            "description": "The timestamp for when individual successfully passed customer safety check."
          }
        }
      },
      "CreateWalletClientDto": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "enum": [
              "solana",
              "base"
            ],
            "example": "base"
          }
        },
        "required": [
          "chain"
        ]
      },
      "WalletBalanceDto": {
        "type": "object",
        "properties": {
          "balance": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "chain": {
            "type": "string"
          },
          "contract_address": {
            "type": "string"
          }
        },
        "required": [
          "balance",
          "currency",
          "chain"
        ]
      },
      "WalletResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "chain": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "balances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WalletBalanceDto"
            }
          }
        },
        "required": [
          "id",
          "chain",
          "address",
          "created_at",
          "updated_at"
        ]
      },
      "WalletsListResponseDto": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "description": "Total number of items in data"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WalletResponseDto"
            }
          }
        },
        "required": [
          "count",
          "data"
        ]
      },
      "VirtualAccountSourceDto": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "enum": [
              "usd",
              "eur",
              "mxn"
            ],
            "description": "Fiat currency for incoming payments"
          }
        },
        "required": [
          "currency"
        ]
      },
      "VirtualAccountDestinationDto": {
        "type": "object",
        "properties": {
          "payment_rail": {
            "type": "string",
            "enum": [
              "ethereum",
              "polygon",
              "solana",
              "stellar",
              "tron",
              "base",
              "arbitrum",
              "avalanche_c_chain",
              "optimism"
            ],
            "description": "Target blockchain network"
          },
          "currency": {
            "type": "string",
            "enum": [
              "usdc",
              "usdt",
              "usdb",
              "dai",
              "eurc",
              "pyusd"
            ],
            "description": "Cryptocurrency to receive"
          },
          "address": {
            "type": "string",
            "description": "Destination blockchain address",
            "minLength": 1
          },
          "blockchain_memo": {
            "type": "string",
            "description": "Optional blockchain memo for certain networks"
          }
        },
        "required": [
          "payment_rail",
          "currency",
          "address"
        ]
      },
      "CreateVirtualAccountClientDto": {
        "type": "object",
        "properties": {
          "source": {
            "required": [
              "currency"
            ],
            "properties": {
              "currency": {
                "type": "string",
                "enum": [
                  "usd",
                  "eur",
                  "mxn"
                ]
              }
            },
            "description": "Source configuration for incoming fiat payments",
            "allOf": [
              {
                "$ref": "#/components/schemas/VirtualAccountSourceDto"
              }
            ]
          },
          "destination": {
            "required": [
              "payment_rail",
              "currency",
              "address"
            ],
            "properties": {
              "payment_rail": {
                "type": "string",
                "enum": [
                  "ethereum",
                  "polygon",
                  "solana",
                  "stellar",
                  "tron",
                  "base",
                  "arbitrum",
                  "avalanche_c_chain",
                  "optimism"
                ]
              },
              "currency": {
                "type": "string",
                "enum": [
                  "usdc",
                  "usdt",
                  "usdb",
                  "dai",
                  "eurc",
                  "pyusd"
                ]
              },
              "address": {
                "type": "string",
                "minLength": 1
              },
              "blockchain_memo": {
                "type": "string"
              }
            },
            "description": "Destination configuration for crypto conversion",
            "allOf": [
              {
                "$ref": "#/components/schemas/VirtualAccountDestinationDto"
              }
            ]
          }
        },
        "required": [
          "source",
          "destination"
        ]
      },
      "VirtualAccountSourceDepositInstructionsDto": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string"
          },
          "bank_name": {
            "type": "string"
          },
          "bank_address": {
            "type": "string"
          },
          "bank_routing_number": {
            "type": "string"
          },
          "bank_account_number": {
            "type": "string"
          },
          "bank_beneficiary_name": {
            "type": "string"
          },
          "bank_beneficiary_address": {
            "type": "string"
          },
          "payment_rail": {
            "type": "string"
          },
          "payment_rails": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "currency",
          "bank_name",
          "bank_address",
          "bank_routing_number",
          "bank_account_number",
          "bank_beneficiary_name",
          "bank_beneficiary_address",
          "payment_rail",
          "payment_rails"
        ]
      },
      "VirtualAccountResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "customer_id": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "source_deposit_instructions": {
            "$ref": "#/components/schemas/VirtualAccountSourceDepositInstructionsDto"
          },
          "destination": {
            "$ref": "#/components/schemas/VirtualAccountDestinationDto"
          }
        },
        "required": [
          "id",
          "status",
          "customer_id",
          "created_at",
          "source_deposit_instructions",
          "destination"
        ]
      },
      "VirtualAccountsListResponseDto": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "description": "Total number of items available.",
            "example": 100
          },
          "data": {
            "description": "Array of virtual accounts for the current page.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VirtualAccountResponseDto"
            }
          }
        },
        "required": [
          "count",
          "data"
        ]
      },
      "TransferEndpointSideDto": {
        "type": "object",
        "properties": {
          "payment_rail": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "from_address": {
            "type": "string"
          },
          "to_address": {
            "type": "string"
          },
          "external_account_id": {
            "type": "string"
          },
          "wallet_id": {
            "type": "string"
          },
          "wire_message": {
            "type": "string"
          },
          "sepa_reference": {
            "type": "string"
          },
          "swift_reference": {
            "type": "string"
          },
          "swift_charges": {
            "type": "string",
            "enum": [
              "our",
              "sha"
            ]
          },
          "ach_reference": {
            "type": "string"
          },
          "blockchain_memo": {
            "type": "string"
          }
        },
        "required": [
          "payment_rail",
          "currency"
        ]
      },
      "TransferDepositInstructionsDto": {
        "type": "object",
        "properties": {
          "payment_rail": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "from_address": {
            "type": "string"
          },
          "to_address": {
            "type": "string"
          },
          "deposit_message": {
            "type": "string"
          },
          "bank_name": {
            "type": "string"
          },
          "bank_address": {
            "type": "string"
          },
          "bank_routing_number": {
            "type": "string"
          },
          "bank_account_number": {
            "type": "string"
          },
          "bank_beneficiary_name": {
            "type": "string"
          },
          "bank_beneficiary_address": {
            "type": "string"
          },
          "blockchain_memo": {
            "type": "string"
          }
        },
        "required": [
          "payment_rail",
          "amount",
          "currency"
        ]
      },
      "TransferReceiptDto": {
        "type": "object",
        "properties": {
          "initial_amount": {
            "type": "string"
          },
          "exchange_fee": {
            "type": "string"
          },
          "subtotal_amount": {
            "type": "string"
          },
          "gas_fee": {
            "type": "string"
          },
          "final_amount": {
            "type": "string"
          },
          "destination_tx_hash": {
            "type": "string"
          }
        },
        "required": [
          "initial_amount",
          "exchange_fee",
          "subtotal_amount"
        ]
      },
      "TransferResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "on_behalf_of": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": [
              "awaiting_funds",
              "in_review",
              "funds_received",
              "payment_submitted",
              "payment_processed",
              "undeliverable",
              "returned",
              "refunded",
              "error",
              "canceled"
            ]
          },
          "source": {
            "$ref": "#/components/schemas/TransferEndpointSideDto"
          },
          "destination": {
            "$ref": "#/components/schemas/TransferEndpointSideDto"
          },
          "source_deposit_instructions": {
            "$ref": "#/components/schemas/TransferDepositInstructionsDto"
          },
          "receipt": {
            "$ref": "#/components/schemas/TransferReceiptDto"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "on_behalf_of",
          "currency",
          "amount",
          "state",
          "source",
          "destination",
          "created_at",
          "updated_at"
        ]
      },
      "TransfersListResponseDto": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "description": "Total number of items available.",
            "example": 100
          },
          "data": {
            "description": "Array of transfer items for the current page.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransferResponseDto"
            }
          }
        },
        "required": [
          "count",
          "data"
        ]
      },
      "LiquidationAddressResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "chain": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "external_account_id": {
            "type": "string"
          },
          "destination_wire_message": {
            "type": "string"
          },
          "destination_payment_rail": {
            "type": "string"
          },
          "destination_currency": {
            "type": "string"
          },
          "destination_address": {
            "type": "string"
          },
          "blockchain_memo": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "chain",
          "address",
          "currency",
          "created_at",
          "updated_at"
        ]
      },
      "LiquidationDrainDestinationDto": {
        "type": "object",
        "properties": {
          "payment_rail": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "to_address": {
            "type": "string"
          },
          "external_account_id": {
            "type": "string"
          },
          "imad": {
            "type": "string"
          },
          "trace_number": {
            "type": "string"
          }
        },
        "required": [
          "payment_rail",
          "currency"
        ]
      },
      "LiquidationDrainResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": [
              "in_review",
              "funds_received",
              "payment_submitted",
              "payment_processed",
              "undeliverable",
              "returned",
              "refunded",
              "error",
              "canceled"
            ]
          },
          "created_at": {
            "type": "string"
          },
          "destination": {
            "$ref": "#/components/schemas/LiquidationDrainDestinationDto"
          },
          "destination_tx_hash": {
            "type": "string"
          },
          "deposit_tx_hash": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "amount",
          "currency",
          "state",
          "created_at",
          "destination"
        ]
      },
      "LiquidationDrainsListResponseDto": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "description": "Total number of items available.",
            "example": 100
          },
          "data": {
            "description": "Array of liquidation drains for the current page.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LiquidationDrainResponseDto"
            }
          }
        },
        "required": [
          "count",
          "data"
        ]
      },
      "LiquidationAddressesListResponseDto": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "description": "Total number of items available.",
            "example": 100
          },
          "data": {
            "description": "Array of liquidation addresses for the current page.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LiquidationAddressResponseDto"
            }
          }
        },
        "required": [
          "count",
          "data"
        ]
      },
      "ExternalAccountBankDetails": {
        "type": "object",
        "properties": {
          "routing_number": {
            "type": "string",
            "description": "Bank routing number"
          },
          "last_4": {
            "type": "string",
            "description": "Last 4 digits of account number"
          },
          "checking_or_savings": {
            "type": "string",
            "description": "Account type: checking or savings"
          }
        },
        "required": [
          "routing_number",
          "last_4",
          "checking_or_savings"
        ]
      },
      "ExternalAccountAddress": {
        "type": "object",
        "properties": {
          "street_line_1": {
            "type": "string",
            "description": "Primary street address"
          },
          "street_line_2": {
            "type": "string",
            "description": "Secondary street address"
          },
          "country": {
            "type": "string",
            "description": "Country code"
          },
          "state": {
            "type": "string",
            "description": "State code"
          },
          "city": {
            "type": "string",
            "description": "City name"
          },
          "postal_code": {
            "type": "string",
            "description": "Postal code"
          }
        },
        "required": [
          "street_line_1",
          "country",
          "state",
          "city",
          "postal_code"
        ]
      },
      "ExternalAccountResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for external account"
          },
          "customer_id": {
            "type": "string",
            "description": "Customer ID this account belongs to"
          },
          "created_at": {
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "type": "string",
            "description": "Last update timestamp"
          },
          "bank_name": {
            "type": "string",
            "description": "Bank name"
          },
          "account_name": {
            "type": "string",
            "description": "Account name"
          },
          "account_owner_name": {
            "type": "string",
            "description": "Full name of account owner"
          },
          "currency": {
            "type": "string",
            "enum": [
              "usd",
              "eur",
              "mxn"
            ],
            "description": "Account currency"
          },
          "account_owner_type": {
            "type": "string",
            "description": "Account owner type"
          },
          "account_type": {
            "type": "string",
            "description": "Account type"
          },
          "first_name": {
            "type": "string",
            "description": "First name of account owner"
          },
          "last_name": {
            "type": "string",
            "description": "Last name of account owner"
          },
          "account": {
            "description": "Bank account details",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalAccountBankDetails"
              }
            ]
          },
          "address": {
            "description": "Account holder address",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalAccountAddress"
              }
            ]
          },
          "beneficiary_address_valid": {
            "type": "boolean",
            "description": "Whether beneficiary address is valid"
          }
        },
        "required": [
          "id",
          "customer_id",
          "created_at",
          "updated_at",
          "bank_name",
          "account_name",
          "account_owner_name",
          "currency",
          "account_owner_type",
          "account_type",
          "first_name",
          "last_name",
          "account"
        ]
      },
      "ExternalAccountsListResponseDto": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "description": "Number of external accounts returned"
          },
          "data": {
            "description": "List of external accounts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalAccountResponseDto"
            }
          }
        },
        "required": [
          "count",
          "data"
        ]
      }
    }
  }
}