{
    "openapi": "3.0.0",
    "paths": {
      "/customers": {
        "post": {
          "operationId": "CustomersController_create",
          "parameters": [
            {
              "name": "idempotency-key",
              "required": true,
              "in": "header",
              "description": "UUID for request idempotency (auto-generated in development if not provided)",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "description": "Customer object to be created (individual only)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCreateRequest"
                },
                "examples": {
                  "individual": {
                    "value": {
                      "type": "individual",
                      "first_name": "John",
                      "last_name": "Doe",
                      "email": "john.doe@example.com",
                      "birth_date": "1990-01-01",
                      "residential_address": {
                        "street_line_1": "123 Main Street",
                        "city": "Portland",
                        "subdivision": "US-ME",
                        "postal_code": "04101",
                        "country": "USA"
                      },
                      "identifying_information": [
                        {
                          "type": "ssn",
                          "issuing_country": "USA",
                          "number": "123-45-6789"
                        }
                      ],
                      "endorsements": [
                        "base"
                      ],
                      "signed_agreement_id": "agr_test_abc123xyz"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Customer object created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CustomerResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Validation error."
            },
            "409": {
              "description": "Idempotency key conflict."
            }
          },
          "summary": "Create a new customer",
          "tags": [
            "Customers"
          ]
        }
      },
      "/customers/{customerId}": {
        "put": {
          "operationId": "CustomersController_update",
          "parameters": [
            {
              "name": "idempotency-key",
              "required": true,
              "in": "header",
              "description": "UUID for request idempotency (auto-generated in development if not provided)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "customerId",
              "required": true,
              "in": "path",
              "description": "Customer ID",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateCustomerClientDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Customer object updated",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CustomerResponseDto"
                  }
                }
              }
            }
          },
          "summary": "Update customer",
          "tags": [
            "Customers"
          ]
        },
        "get": {
          "operationId": "CustomersController_findOne",
          "parameters": [
            {
              "name": "customerId",
              "required": true,
              "in": "path",
              "description": "Customer ID",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Get customer",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CustomerResponseDto"
                  }
                }
              }
            }
          },
          "summary": "Get customer and check KYC status",
          "tags": [
            "Customers"
          ]
        }
      },
      "/customers/{customerId}/wallets": {
        "post": {
          "operationId": "WalletsController_create",
          "parameters": [
            {
              "name": "idempotency-key",
              "required": true,
              "in": "header",
              "description": "UUID for request idempotency (auto-generated in development if not provided)",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "chain": "solana"
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WalletResponseDto"
                  }
                }
              }
            }
          },
          "summary": "Create a new custodial wallet for a customer",
          "tags": [
            "Wallets"
          ]
        },
        "get": {
          "operationId": "WalletsController_listForCustomer",
          "parameters": [
            {
              "name": "starting_after",
              "required": false,
              "in": "query",
              "schema": {
                "type": "string",
                "description": "A wallet ID. If provided, returns the next page starting after this wallet in the timeline (which is ordered newest → oldest). Implies that wallets older than the specified ID will be returned. Mutually exclusive with ending_before."
              }
            },
            {
              "name": "ending_before",
              "required": false,
              "in": "query",
              "schema": {
                "type": "string",
                "description": "A wallet ID. If provided, returns the previous page ending before this wallet in the timeline (newest → oldest). Implies that wallets newer than the specified ID will be returned. Mutually exclusive with starting_after."
              }
            },
            {
              "name": "limit",
              "required": false,
              "in": "query",
              "schema": {
                "minimum": 1,
                "maximum": 100,
                "type": "integer",
                "description": "Number of items to return."
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WalletsListResponseDto"
                  }
                }
              }
            }
          },
          "summary": "List wallets for a customer",
          "tags": [
            "Wallets"
          ]
        }
      },
      "/customers/{customerId}/wallets/{walletId}": {
        "get": {
          "operationId": "WalletsController_getWallet",
          "parameters": [
            {
              "name": "walletId",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string",
                "description": "The ID of the wallet to get."
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WalletResponseDto"
                  }
                }
              }
            }
          },
          "summary": "Get a wallet and balances for a customer",
          "tags": [
            "Wallets"
          ]
        }
      },
      "/customers/{customerId}/virtual_accounts": {
        "post": {
          "operationId": "VirtualAccountsController_create",
          "parameters": [
            {
              "name": "idempotency-key",
              "required": true,
              "in": "header",
              "description": "UUID for request idempotency (auto-generated in development if not provided)",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "description": "ACH/Wire→Crypto virtual account configuration",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "ach_to_solana": {
                    "value": {
                      "source": {
                        "currency": "usd"
                      },
                      "destination": {
                        "payment_rail": "solana",
                        "currency": "usdc",
                        "address": "targetSolanaAddress1111111111111111111111111111"
                      },
                      "developer_fee_percent": "0.5"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/VirtualAccountResponseDto"
                  }
                }
              }
            }
          },
          "summary": "Create a virtual account",
          "tags": [
            "Virtual Accounts"
          ]
        },
        "get": {
          "operationId": "VirtualAccountsController_list",
          "parameters": [
            {
              "name": "starting_after",
              "required": false,
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "ending_before",
              "required": false,
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "required": false,
              "in": "query",
              "schema": {
                "minimum": 1,
                "maximum": 100,
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/VirtualAccountResponseDto"
                    }
                  }
                }
              }
            }
          },
          "summary": "List virtual accounts for customer",
          "tags": [
            "Virtual Accounts"
          ]
        }
      },
      "/customers/{customerId}/virtual_accounts/{virtualAccountId}": {
        "get": {
          "operationId": "VirtualAccountsController_get",
          "parameters": [
            {
              "name": "virtualAccountId",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/VirtualAccountResponseDto"
                  }
                }
              }
            }
          },
          "summary": "Get virtual account by id",
          "tags": [
            "Virtual Accounts"
          ]
        }
      },
      "/transfers": {
        "post": {
          "operationId": "TransfersController_create",
          "parameters": [
            {
              "name": "idempotency-key",
              "required": true,
              "in": "header",
              "description": "UUID for request idempotency (auto-generated in development if not provided)",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "description": "Transfer object to be created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "ach_onramp_to_solana": {
                    "summary": "ACH onramp to Solana USDC",
                    "value": {
                      "amount": "75.0",
                      "on_behalf_of": "cust_123",
                      "source": {
                        "payment_rail": "ach_push",
                        "currency": "usd"
                      },
                      "destination": {
                        "payment_rail": "solana",
                        "currency": "usdc",
                        "to_address": "SolanaDest111111111111111111111111111",
                        "wallet_id": "wallet_123"
                      }
                    }
                  },
                  "crypto_offramp_to_ach": {
                    "summary": "Crypto (Ethereum USDC) → ACH",
                    "value": {
                      "amount": "100.0",
                      "on_behalf_of": "cust_123",
                      "source": {
                        "payment_rail": "ethereum",
                        "currency": "usdc",
                        "from_address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                      },
                      "destination": {
                        "payment_rail": "ach",
                        "currency": "usd",
                        "external_account_id": "ext_123"
                      }
                    }
                  },
                  "flexible_amount": {
                    "summary": "Flexible amount transfer (omit amount)",
                    "value": {
                      "on_behalf_of": "cust_123",
                      "source": {
                        "payment_rail": "sepa",
                        "currency": "eur"
                      },
                      "destination": {
                        "payment_rail": "ethereum",
                        "currency": "usdc",
                        "to_address": "0xb794f5ea0ba39494ce839613fffba74279579268"
                      },
                      "features": {
                        "flexible_amount": true
                      }
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": ""
            }
          },
          "summary": "Create a transfer",
          "tags": [
            "Transfers"
          ]
        },
        "get": {
          "operationId": "TransfersController_list",
          "parameters": [
            {
              "name": "starting_after",
              "required": false,
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "ending_before",
              "required": false,
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "required": false,
              "in": "query",
              "schema": {
                "minimum": 1,
                "maximum": 100,
                "type": "integer"
              }
            },
            {
              "name": "state",
              "required": false,
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "from",
              "required": false,
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "to",
              "required": false,
              "in": "query",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": ""
            }
          },
          "summary": "List transfers",
          "tags": [
            "Transfers"
          ]
        }
      },
      "/transfers/{transferId}": {
        "get": {
          "operationId": "TransfersController_get",
          "parameters": [
            {
              "name": "transferId",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TransferResponseDto"
                  }
                }
              }
            }
          },
          "summary": "Get a transfer by id",
          "tags": [
            "Transfers"
          ]
        }
      },
      "/customers/{customerId}/liquidation_addresses": {
        "post": {
          "operationId": "LiquidationAddressesController_create",
          "parameters": [
            {
              "name": "idempotency-key",
              "required": true,
              "in": "header",
              "description": "UUID for request idempotency (auto-generated in development if not provided)",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "chain": "ethereum",
                        "currency": "usdc",
                        "destination_payment_rail": "wire",
                        "destination_currency": "usd",
                        "external_account_id": "ext_123",
                        "custom_developer_fee_percent": "0.25"
                      }
                    },
                    {
                      "example": {
                        "chain": "solana",
                        "currency": "usdc",
                        "destination_payment_rail": "solana",
                        "destination_currency": "usdc",
                        "destination_address": "SolanaDest111111111111111111111111111"
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LiquidationAddressResponseDto"
                  }
                }
              }
            }
          },
          "summary": "Create a liquidation address for a customer",
          "tags": [
            "Liquidation Addresses"
          ]
        },
        "get": {
          "operationId": "LiquidationAddressesController_list",
          "parameters": [
            {
              "name": "starting_after",
              "required": false,
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "ending_before",
              "required": false,
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "required": false,
              "in": "query",
              "schema": {
                "minimum": 1,
                "maximum": 100,
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LiquidationAddressResponseDto"
                    }
                  }
                }
              }
            }
          },
          "summary": "List liquidation addresses for a customer",
          "tags": [
            "Liquidation Addresses"
          ]
        }
      },
      "/customers/{customerId}/liquidation_addresses/{liquidationAddressId}/drains": {
        "get": {
          "operationId": "LiquidationAddressesController_listDrains",
          "parameters": [
            {
              "name": "liquidationAddressId",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "starting_after",
              "required": false,
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "ending_before",
              "required": false,
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "required": false,
              "in": "query",
              "schema": {
                "minimum": 1,
                "maximum": 100,
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LiquidationDrainResponseDto"
                    }
                  }
                }
              }
            }
          },
          "summary": "Get drain history of a liquidation address",
          "tags": [
            "Liquidation Addresses"
          ]
        }
      },
      "/customers/{customerId}/liquidation_addresses/{liquidationAddressId}": {
        "get": {
          "operationId": "LiquidationAddressesController_get",
          "parameters": [
            {
              "name": "liquidationAddressId",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LiquidationAddressResponseDto"
                  }
                }
              }
            }
          },
          "summary": "Get liquidation address by id",
          "tags": [
            "Liquidation Addresses"
          ]
        }
      },
      "/customers/{customerId}/external_accounts": {
        "post": {
          "operationId": "ExternalAccountsController_create",
          "parameters": [
            {
              "name": "idempotency-key",
              "required": true,
              "in": "header",
              "description": "UUID for request idempotency (auto-generated in development if not provided)",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "description": "Bank account details (US banks only)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "us_checking": {
                    "value": {
                      "currency": "usd",
                      "account_type": "us",
                      "bank_name": "Lead Bank",
                      "account_name": "John Checking Account",
                      "first_name": "John",
                      "last_name": "Doe",
                      "account_owner_type": "individual",
                      "account_owner_name": "John Doe",
                      "account": {
                        "routing_number": "101019644",
                        "account_number": "215268129123",
                        "checking_or_savings": "checking"
                      },
                      "address": {
                        "street_line_1": "923 Folsom Street",
                        "country": "USA",
                        "state": "CA",
                        "city": "San Francisco",
                        "postal_code": "94107"
                      }
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ExternalAccountResponseDto"
                  }
                }
              }
            }
          },
          "summary": "Add a bank account for withdrawals",
          "tags": [
            "External Accounts"
          ]
        },
        "get": {
          "operationId": "ExternalAccountsController_list",
          "parameters": [
            {
              "name": "starting_after",
              "required": false,
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "ending_before",
              "required": false,
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "required": false,
              "in": "query",
              "schema": {
                "minimum": 1,
                "maximum": 100,
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ExternalAccountsListResponseDto"
                  }
                }
              }
            }
          },
          "summary": "List bank accounts for customer",
          "tags": [
            "External Accounts"
          ]
        }
      },
      "/customers/{customerId}/external_accounts/{externalAccountId}": {
        "get": {
          "operationId": "ExternalAccountsController_get",
          "parameters": [
            {
              "name": "externalAccountId",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ExternalAccountResponseDto"
                  }
                }
              }
            }
          },
          "summary": "Get bank account by id",
          "tags": [
            "External Accounts"
          ]
        },
        "delete": {
          "operationId": "ExternalAccountsController_delete",
          "parameters": [
            {
              "name": "externalAccountId",
              "required": true,
              "in": "path",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Bank account removed successfully"
            }
          },
          "summary": "Remove bank account",
          "tags": [
            "External Accounts"
          ]
        }
      },
      "/ping": {
        "get": {
          "operationId": "PingController_ping",
          "parameters": [],
          "responses": {
            "200": {
              "description": ""
            }
          },
          "tags": [
            "Ping"
          ]
        }
      }
    },
    "info": {
      "title": "Payment API",
      "description": "\nAPI documentation for the payment processing service\n\n## Quick Start\n1. API-Key will be automatically set to \"test-api-key\" for testing\n2. Tenant ID is now automatically resolved from your API key\n3. idempotency-key will be auto-generated for write operations if not provided\n\n## Headers\n- **api-key**: Your tenant API key (defaults to \"test-api-key\" in Swagger)\n- **Tenant ID**: Automatically resolved from your API key\n- **idempotency-key**: UUID for request idempotency (auto-generated if not provided)\n        ",
      "version": "1.0",
      "contact": {}
    },
    "tags": [],
    "servers": [
      {
        "url": "http://localhost:3000",
        "description": "Development server"
      }
    ],
    "components": {
      "securitySchemes": {
        "api-key": {
          "type": "apiKey",
          "in": "header",
          "name": "api-key",
          "description": "Tenant API key (defaults to \"test-api-key\" in Swagger)"
        },
        "idempotency-key": {
          "type": "apiKey",
          "in": "header",
          "name": "idempotency-key",
          "description": "UUID for request idempotency (auto-generated if not provided)"
        }
      },
      "schemas": {
        "CustomerCreateRequest": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["individual"],
            "description": "Customer kind: individual or business."
          },
          "first_name": {
            "type": "string",
            "description": "First name of the individual."
          },
          "last_name": {
            "type": "string",
            "description": "Last name of the individual."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Primary email address for the customer."
          },
          "birth_date": {
            "type": "string",
            "format": "date",
            "description": "Date of birth in YYYY-MM-DD format. Must be at least 18 years ago."
          },
          "residential_address": {
            "type": "object",
            "$ref": "#/components/schemas/AddressDto",
            "description": "Physical residential address of the customer. PO Boxes are not accepted."
          },
          "signed_agreement_id": {
            "type": "string",
            "description": "Identifier for the agreement the customer has signed; required to track acceptance of terms."
          },
          "endorsements": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of endorsements being requested. If omitted, default endorsements (e.g. base, sepa) may be attempted."
          },
          "identifying_information": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentifyingInformation"
            },
            "description": "Documents or identifiers issued by authorities to verify identity (e.g. driver’s license, passport)."
          }
        },
        "required": ["type"]
      },
      "Address": {
        "type": "object",
        "properties": {
          "street_line_1": {
            "type": "string",
            "description": "First line of street address (physical address)."
          },
          "street_line_2": {
            "type": "string",
            "description": "Second address line, e.g. apartment, suite, etc."
          },
          "city": {
            "type": "string",
            "description": "City or locality."
          },
          "subdivision": {
            "type": "string",
            "description": "State, province, or region code."
          },
          "postal_code": {
            "type": "string",
            "description": "Postal or ZIP code."
          },
          "country": {
            "type": "string",
            "description": "Country code (ISO or full name) or country name."
          }
        }
      },
      "IdentifyingInformation": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of document or identifier (e.g. passport, drivers_license)."
          },
          "issuing_country": {
            "type": "string",
            "description": "Country that issued the identifier."
          },
          "number": {
            "type": "string",
            "description": "Identifier number."
          },
          "description": {
            "type": "string",
            "description": "Optional note or description of the identifier."
          },
          "expiration": {
            "type": "string",
            "format": "date",
            "description": "Expiration date of the identifier."
          },
          "image_front": {
            "type": "string",
            "description": "Front image of the identifier (URL or base-64)."
          },
          "image_back": {
            "type": "string",
            "description": "Back image of the identifier (URL or base-64)."
          }
        }
      },
      "CustomerDocument": {
        "type": "object",
        "properties": {
          "purposes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Purposes for which the document is submitted (e.g. proof_of_account_purpose)."
          },
          "file": {
            "type": "string",
            "description": "Document content (file upload or URL reference)."
          },
          "description": {
            "type": "string",
            "description": "Optional description of the document."
          }
        }
      },
        "EndorsementDto": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "enum": [
                "base",
                "sepa",
                "ach",
                "wire",
                "swift",
                "spei",
                "ach_same_day",
                "ach_push"
              ]
            },
            "status": {
              "type": "string",
              "enum": [
                "incomplete",
                "approved",
                "revoked",
                "pending",
                "under_review",
                "rejected"
              ]
            },
            "additional_requirements": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "name",
            "status"
          ]
        },
        "CustomerResponseDto": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier for customer record."
            },
            "first_name": {
              "type": "string",
              "description": "First name of the customer."
            },
            "last_name": {
              "type": "string",
              "description": "Last name of the customer."
            },
            "email": {
              "type": "string",
              "description": "Customer's email."
            },
            "status": {
              "type": "string",
              "description": "Current onboarding / verification status of the customer.",
              "enum": [
                "active",
                "awaiting_questionnaire",
                "awaiting_ubo",
                "incomplete",
                "not_started",
                "offboarded",
                "paused",
                "rejected",
                "under_review"
              ]
            },
            "has_accepted_terms_of_service": {
              "type": "boolean",
              "description": "Whether the customer has accepted the terms of service."
            },
            "rejection_reasons": {
              "description": "KYC rejection reasons",
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            "requirements_due": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "KYC or other requirements still due for the customer."
            },
            "future_requirements_due": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Requirements that may be needed in the future (e.g. for higher volumes)."
            },
            "endorsements": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EndorsementDto"
              },
              "description": "Status and details of requested endorsements."
            },
            "created_at": {
              "type": "string",
              "description": "Timestamp when customer was created."
            },
            "updated_at": {
              "type": "string",
              "description": "Timestamp of last update to customer record."
            }
          },
          "required": [
            "id",
            "status"
          ]
        },
        "AddressDto": {
          "type": "object",
          "properties": {
            "street_line_1": {
              "type": "string",
              "minLength": 4,
              "example": "123 Main Street",
              "description": "Street address (minimum 4 characters)"
            },
            "street_line_2": {
              "type": "string",
              "example": "Apt 2B",
              "description": "Optional address line 2"
            },
            "city": {
              "type": "string",
              "minLength": 1,
              "example": "Portland",
              "description": "City name"
            },
            "subdivision": {
              "type": "string",
              "pattern": "^US-[A-Z]{2}$",
              "example": "US-ME",
              "description": "ISO 3166-2 subdivision code with country prefix (required for USA): US-CA, US-TX, US-ME, etc."
            },
            "postal_code": {
              "type": "string",
              "example": "04101",
              "description": "Postal code"
            },
            "country": {
              "type": "string",
              "minLength": 3,
              "maxLength": 3,
              "example": "USA",
              "description": "ISO 3166-1 alpha-3 country code"
            }
          }
        },
        "UpdateCustomerClientDto": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "individual",
                "business"
              ],
              "example": "individual",
              "description": "Type of customer"
            },
            "first_name": {
              "type": "string",
              "minLength": 2,
              "maxLength": 1024,
              "example": "John",
              "description": "First name (2-1024 characters)"
            },
            "last_name": {
              "type": "string",
              "minLength": 2,
              "maxLength": 1024,
              "example": "Doe",
              "description": "Last name (2-1024 characters)"
            },
            "email": {
              "type": "string",
              "format": "email",
              "pattern": "^(?!\\.)(?!.*\\.\\.)([A-Za-z0-9_'+\\-\\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\\-]*\\.)+[A-Za-z]{2,}$",
              "example": "john.doe@example.com",
              "description": "Email address"
            },
            "birth_date": {
              "type": "string",
              "example": "1990-01-01",
              "description": "Birth date in yyyy-mm-dd format (must be 18+)"
            },
            "residential_address": {
              "properties": {
                "street_line_1": {
                  "type": "string",
                  "minLength": 4
                },
                "street_line_2": {
                  "type": "string"
                },
                "city": {
                  "type": "string",
                  "minLength": 1
                },
                "subdivision": {
                  "type": "string",
                  "pattern": "^US-[A-Z]{2}$"
                },
                "postal_code": {
                  "type": "string"
                },
                "country": {
                  "type": "string",
                  "minLength": 3,
                  "maxLength": 3
                }
              },
              "description": "Residential address",
              "example": {
                "street_line_1": "123 Main Street",
                "city": "Portland",
                "subdivision": "US-ME",
                "postal_code": "04101",
                "country": "USA"
              },
              "allOf": [
                {
                  "$ref": "#/components/schemas/AddressDto"
                }
              ]
            },
            "identifying_information": {
              "items": {
                "type": "object"
              },
              "description": "Tax identification and government documents",
              "example": [
                {
                  "type": "ssn",
                  "issuing_country": "USA",
                  "number": "123-45-6789"
                }
              ],
              "type": "array"
            },
            "endorsements": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "base",
                  "sepa",
                  "ach",
                  "wire",
                  "swift",
                  "spei",
                  "ach_same_day",
                  "ach_push"
                ]
              },
              "example": [
                "base"
              ],
              "description": "Endorsements to request"
            },
            "signed_agreement_id": {
              "type": "string",
              "minLength": 1,
              "maxLength": 1024,
              "example": "agr_test_1234567890abcdef",
              "description": "ID of signed agreement (required for customer creation). Get from ToS acceptance flow."
            },
            "middle_name": {
              "type": "string"
            },
            "transliterated_first_name": {
              "type": "string"
            },
            "transliterated_middle_name": {
              "type": "string"
            },
            "transliterated_last_name": {
              "type": "string"
            },
            "phone": {
              "type": "string"
            },
            "transliterated_residential_address": {
              "type": "object",
              "properties": {
                "street_line_1": {
                  "type": "string",
                  "minLength": 4
                },
                "street_line_2": {
                  "type": "string"
                },
                "city": {
                  "type": "string",
                  "minLength": 1
                },
                "subdivision": {
                  "type": "string",
                  "pattern": "^US-[A-Z]{2}$"
                },
                "postal_code": {
                  "type": "string"
                },
                "country": {
                  "type": "string",
                  "minLength": 3,
                  "maxLength": 3
                }
              },
              "required": [
                "street_line_1",
                "city",
                "country"
              ]
            },
            "account_purpose": {
              "type": "string",
              "enum": [
                "charitable_donations",
                "ecommerce_retail_payments",
                "investment_purposes",
                "operating_a_company",
                "other",
                "payments_to_friends_or_family_abroad",
                "personal_or_living_expenses",
                "protect_wealth",
                "purchase_goods_and_services",
                "receive_payment_for_freelancing",
                "receive_salary"
              ]
            },
            "account_purpose_other": {
              "type": "string"
            },
            "employment_status": {
              "type": "string",
              "enum": [
                "employed",
                "homemaker",
                "retired",
                "self_employed",
                "student",
                "unemployed"
              ]
            },
            "expected_monthly_payments_usd": {
              "type": "string",
              "enum": [
                "0_4999",
                "5000_9999",
                "10000_49999",
                "50000_plus"
              ]
            },
            "acting_as_intermediary": {
              "type": "boolean"
            },
            "most_recent_occupation": {
              "type": "string"
            },
            "source_of_funds": {
              "type": "string",
              "enum": [
                "company_funds",
                "ecommerce_reseller",
                "gambling_proceeds",
                "gifts",
                "government_benefits",
                "inheritance",
                "investments_loans",
                "pension_retirement",
                "salary",
                "sale_of_assets_real_estate",
                "savings",
                "someone_elses_funds"
              ]
            },
            "nationality": {
              "type": "string"
            },
            "verified_govid_at": {
              "type": "string"
            },
            "verified_selfie_at": {
              "type": "string"
            },
            "completed_customer_safety_check_at": {
              "type": "string"
            },
            "documents": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "purposes": {
                    "minItems": 1,
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "proof_of_account_purpose",
                        "proof_of_address",
                        "proof_of_individual_name_change",
                        "proof_of_relationship",
                        "proof_of_source_of_funds",
                        "proof_of_source_of_wealth",
                        "proof_of_tax_identification",
                        "other"
                      ]
                    }
                  },
                  "file": {
                    "type": "string",
                    "minLength": 1
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "required": [
                  "purposes",
                  "file"
                ]
              }
            }
          }
        },
        "WalletBalanceDto": {
          "type": "object",
          "properties": {
            "balance": {
              "type": "string",
              "description": "The amount held in the wallet for this currency/asset."
            },
            "currency": {
              "type": "string",
              "description": "The currency/asset held in the wallet."
            },
            "chain": {
              "type": "string",
              "description": "The blockchain on which this balance is held (e.g. \"solana\", \"ethereum\")."
            },
            "contract_address": {
              "type": "string",
              "description": "If the currency is a token on a smart contract, this is the address of that contract."
            }
          },
          "required": [
            "balance",
            "currency",
            "chain"
          ]
        },
        "WalletResponseDto": {
          "type": "object",
    "properties": {
      "id": {
        "type": "string",
        "description": "Unique identifier for the wallet."
      },
      "chain": {
        "type": "string",
        "description": "The blockchain network where the wallet exists."
      },
      "address": {
        "type": "string",
        "description": "Blockchain address of the wallet."
      },
      "created_at": {
        "type": "string",
        "description": "UTC timestamp when the wallet was created. Format: date-time."
      },
      "updated_at": {
        "type": "string",
        "description": "UTC timestamp when the wallet was last updated. Format: date-time."
      },
      "balances": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/WalletBalanceDto"
        },
        "description": "List of balances held in this wallet across different currencies or tokens."
      }
    },
          "required": [
            "id",
            "chain",
            "address",
            "created_at",
            "updated_at"
          ]
        },
        "WalletsListResponseDto": {
          "type": "object",
          "properties": {
            "count": {
              "type": "number",
              "description": "Total number of items in data"
            },
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/WalletResponseDto"
              }
            }
          },
          "required": [
            "count",
            "data"
          ]
        },
        "VirtualAccountSourceDepositInstructionsDto": {
          "type": "object",
          "properties": {
            "currency": {
              "type": "string"
            },
            "bank_name": {
              "type": "string"
            },
            "bank_address": {
              "type": "string"
            },
            "bank_routing_number": {
              "type": "string"
            },
            "bank_account_number": {
              "type": "string"
            },
            "bank_beneficiary_name": {
              "type": "string"
            },
            "bank_beneficiary_address": {
              "type": "string"
            },
            "payment_rail": {
              "type": "string"
            },
            "payment_rails": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "currency",
            "bank_name",
            "bank_address",
            "bank_routing_number",
            "bank_account_number",
            "bank_beneficiary_name",
            "bank_beneficiary_address",
            "payment_rail",
            "payment_rails"
          ]
        },
        "VirtualAccountDestinationDto": {
          "type": "object",
          "properties": {
            "currency": {
              "type": "string"
            },
            "payment_rail": {
              "type": "string"
            },
            "address": {
              "type": "string"
            },
            "blockchain_memo": {
              "type": "string"
            }
          },
          "required": [
            "currency",
            "payment_rail",
            "address"
          ]
        },
        "VirtualAccountResponseDto": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "customer_id": {
              "type": "string"
            },
            "created_at": {
              "type": "string"
            },
            "source_deposit_instructions": {
              "$ref": "#/components/schemas/VirtualAccountSourceDepositInstructionsDto"
            },
            "destination": {
              "$ref": "#/components/schemas/VirtualAccountDestinationDto"
            }
          },
          "required": [
            "id",
            "status",
            "customer_id",
            "created_at",
            "source_deposit_instructions",
            "destination"
          ]
        },
        "TransferEndpointSideDto": {
          "type": "object",
          "properties": {
            "payment_rail": {
              "type": "string"
            },
            "currency": {
              "type": "string"
            },
            "from_address": {
              "type": "string"
            },
            "to_address": {
              "type": "string"
            },
            "external_account_id": {
              "type": "string"
            },
            "wallet_id": {
              "type": "string"
            },
            "wire_message": {
              "type": "string"
            },
            "sepa_reference": {
              "type": "string"
            },
            "swift_reference": {
              "type": "string"
            },
            "swift_charges": {
              "type": "string",
              "enum": [
                "our",
                "sha"
              ]
            },
            "ach_reference": {
              "type": "string"
            },
            "blockchain_memo": {
              "type": "string"
            }
          },
          "required": [
            "payment_rail",
            "currency"
          ]
        },
        "TransferDepositInstructionsDto": {
          "type": "object",
          "properties": {
            "payment_rail": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            },
            "currency": {
              "type": "string"
            },
            "from_address": {
              "type": "string"
            },
            "to_address": {
              "type": "string"
            },
            "deposit_message": {
              "type": "string"
            },
            "bank_name": {
              "type": "string"
            },
            "bank_address": {
              "type": "string"
            },
            "bank_routing_number": {
              "type": "string"
            },
            "bank_account_number": {
              "type": "string"
            },
            "bank_beneficiary_name": {
              "type": "string"
            },
            "bank_beneficiary_address": {
              "type": "string"
            },
            "blockchain_memo": {
              "type": "string"
            }
          },
          "required": [
            "payment_rail",
            "amount",
            "currency"
          ]
        },
        "TransferReceiptDto": {
          "type": "object",
          "properties": {
            "initial_amount": {
              "type": "string"
            },
            "exchange_fee": {
              "type": "string"
            },
            "subtotal_amount": {
              "type": "string"
            },
            "gas_fee": {
              "type": "string"
            },
            "final_amount": {
              "type": "string"
            },
            "destination_tx_hash": {
              "type": "string"
            }
          },
          "required": [
            "initial_amount",
            "exchange_fee",
            "subtotal_amount"
          ]
        },
        "TransferResponseDto": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "on_behalf_of": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            },
            "state": {
              "type": "string",
              "enum": [
                "awaiting_funds",
                "in_review",
                "funds_received",
                "payment_submitted",
                "payment_processed",
                "undeliverable",
                "returned",
                "refunded",
                "error",
                "canceled"
              ]
            },
            "source": {
              "$ref": "#/components/schemas/TransferEndpointSideDto"
            },
            "destination": {
              "$ref": "#/components/schemas/TransferEndpointSideDto"
            },
            "source_deposit_instructions": {
              "$ref": "#/components/schemas/TransferDepositInstructionsDto"
            },
            "receipt": {
              "$ref": "#/components/schemas/TransferReceiptDto"
            },
            "created_at": {
              "type": "string"
            },
            "updated_at": {
              "type": "string"
            }
          },
          "required": [
            "id",
            "on_behalf_of",
            "amount",
            "state",
            "source",
            "destination",
            "created_at",
            "updated_at"
          ]
        },
        "LiquidationAddressResponseDto": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "chain": {
              "type": "string"
            },
            "address": {
              "type": "string"
            },
            "currency": {
              "type": "string"
            },
            "external_account_id": {
              "type": "string"
            },
            "destination_wire_message": {
              "type": "string"
            },
            "destination_payment_rail": {
              "type": "string"
            },
            "destination_currency": {
              "type": "string"
            },
            "destination_address": {
              "type": "string"
            },
            "blockchain_memo": {
              "type": "string"
            },
            "created_at": {
              "type": "string"
            },
            "updated_at": {
              "type": "string"
            }
          },
          "required": [
            "id",
            "chain",
            "address",
            "currency",
            "created_at",
            "updated_at"
          ]
        },
        "LiquidationDrainDestinationDto": {
          "type": "object",
          "properties": {
            "payment_rail": {
              "type": "string"
            },
            "currency": {
              "type": "string"
            },
            "to_address": {
              "type": "string"
            },
            "external_account_id": {
              "type": "string"
            },
            "imad": {
              "type": "string"
            },
            "trace_number": {
              "type": "string"
            }
          },
          "required": [
            "payment_rail",
            "currency"
          ]
        },
        "LiquidationDrainResponseDto": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            },
            "currency": {
              "type": "string"
            },
            "state": {
              "type": "string",
              "enum": [
                "in_review",
                "funds_received",
                "payment_submitted",
                "payment_processed",
                "undeliverable",
                "returned",
                "refunded",
                "error",
                "canceled"
              ]
            },
            "created_at": {
              "type": "string"
            },
            "destination": {
              "$ref": "#/components/schemas/LiquidationDrainDestinationDto"
            },
            "destination_tx_hash": {
              "type": "string"
            },
            "deposit_tx_hash": {
              "type": "string"
            }
          },
          "required": [
            "id",
            "amount",
            "currency",
            "state",
            "created_at",
            "destination"
          ]
        },
        "ExternalAccountBankDetails": {
          "type": "object",
          "properties": {
            "routing_number": {
              "type": "string",
              "description": "Bank routing number"
            },
            "account_number_last_four": {
              "type": "string",
              "description": "Last 4 digits of account number"
            }
          },
          "required": [
            "routing_number",
            "account_number_last_four"
          ]
        },
        "ExternalAccountAddress": {
          "type": "object",
          "properties": {
            "street_line_1": {
              "type": "string",
              "description": "Primary street address"
            },
            "street_line_2": {
              "type": "string",
              "description": "Secondary street address"
            },
            "country": {
              "type": "string",
              "description": "Country code"
            },
            "state": {
              "type": "string",
              "description": "State code"
            },
            "city": {
              "type": "string",
              "description": "City name"
            },
            "postal_code": {
              "type": "string",
              "description": "Postal code"
            }
          },
          "required": [
            "street_line_1",
            "country",
            "state",
            "city",
            "postal_code"
          ]
        },
        "ExternalAccountResponseDto": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier for external account"
            },
            "customer_id": {
              "type": "string",
              "description": "Customer ID this account belongs to"
            },
            "created_at": {
              "type": "string",
              "description": "Creation timestamp"
            },
            "updated_at": {
              "type": "string",
              "description": "Last update timestamp"
            },
            "bank_name": {
              "type": "string",
              "description": "Bank name"
            },
            "account_name": {
              "type": "string",
              "description": "Account name"
            },
            "account_owner_name": {
              "type": "string",
              "description": "Full name of account owner"
            },
            "currency": {
              "type": "string",
              "enum": [
                "usd",
                "eur",
                "mxn"
              ],
              "description": "Account currency"
            },
            "account_owner_type": {
              "type": "string",
              "description": "Account owner type"
            },
            "account_type": {
              "type": "string",
              "description": "Account type"
            },
            "first_name": {
              "type": "string",
              "description": "First name of account owner"
            },
            "last_name": {
              "type": "string",
              "description": "Last name of account owner"
            },
            "account": {
              "description": "Bank account details",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ExternalAccountBankDetails"
                }
              ]
            },
            "address": {
              "description": "Account holder address",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ExternalAccountAddress"
                }
              ]
            },
            "beneficiary_address_valid": {
              "type": "boolean",
              "description": "Whether beneficiary address is valid"
            }
          },
          "required": [
            "id",
            "customer_id",
            "created_at",
            "updated_at",
            "bank_name",
            "account_name",
            "account_owner_name",
            "currency",
            "account_owner_type",
            "account_type",
            "first_name",
            "last_name",
            "account"
          ]
        },
        "ExternalAccountsListResponseDto": {
          "type": "object",
          "properties": {
            "count": {
              "type": "number",
              "description": "Number of external accounts returned"
            },
            "data": {
              "description": "List of external accounts",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ExternalAccountResponseDto"
              }
            }
          },
          "required": [
            "count",
            "data"
          ]
        }
      }
    }
  }